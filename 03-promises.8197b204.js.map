{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAGA,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAYtC,OAVgB,IAAIC,SAAQ,CAACC,EAASC,KACpCC,YAAW,KACLN,EACFI,EAAQ,CAACN,SAASA,EAAUC,MAAMA,IAElCM,EAAO,CAACP,SAASA,EAAUC,MAAMA,GAAO,GAEzCA,EAAM,G,CAmCAQ,SAASC,cAAc,aAE/BC,iBAAiB,UAAWC,IAE/B,GADAA,EAAGC,iBACAD,EAAGE,cAAcC,aAAa,WAC/B,OAEF,IAAIH,EAAGE,cACL,QAtCJ,SAAoBE,GAClB,IAAMC,KAAAC,GAASF,EACf,MAAMG,EAAQD,EAAKE,SACbC,EAASC,SAASH,EAAc,OAAEI,MAAM,IACxCC,EAAQF,SAASH,EAAa,MAAEI,MAAM,IACtCE,EAAOH,SAASH,EAAY,KAAEI,MAAM,IAC1C,IAAIG,EAAYD,EAChBP,EAAKS,aAAa,UAAU,QAC5BD,EAAYF,EACZ,MAAMI,EAAc5B,IACfA,IAAaqB,GACdH,EAAKW,gBAAgB,UAAU,EAGnC,IAAK,IAAIC,EAAI,EAAGA,EAAIT,EAAQS,IACV/B,EAAc+B,EAAE,EAAGJ,GAC3BK,MAAMC,IACZ,MAAMhC,SAACA,EAAQC,MAAEA,GAAS+B,EAC1BnC,EAAAoC,OAAOC,QAAQ,uBAAqBlC,QAAiBC,OACnD2B,EAAS5B,EAAS,IAErBmC,OAAOH,IACN,MAAMhC,SAACA,EAAQC,MAAEA,GAAS+B,EAC1BnC,EAAAoC,OAAOG,QAAQ,sBAAoBpC,QAAeC,OAClD2B,EAAW5B,EAAS,IAEtB0B,GAAaD,C,CAkBfY,CAJa,CACXrC,SAAU,EACViB,KAAML,EAAGE,eAEK","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio'\nimport \"notiflix/dist/notiflix-3.2.5.min.css\"\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({position:position, delay:delay});\n      } else {\n        reject({position:position, delay:delay});\n      }\n    }, delay);\n  });\n\n  return promise;\n}\nfunction doPromises(data){\n  let { form } = data\n  const elems = form.elements\n  const amount = parseInt(elems['amount'].value,10)\n  const delay = parseInt(elems['delay'].value,10)\n  const step = parseInt(elems['step'].value,10)\n  let currDelay = step\n  form.setAttribute(\"pending\",\"true\")\n  currDelay = delay\n  const unblocking = (position) =>{\n    if(position === amount){\n      form.removeAttribute(\"pending\")\n    }\n  }\n  for (let i = 0; i < amount; i++){\n    const promise = createPromise(i+1, currDelay)\n    promise.then((data) => {\n      const {position, delay} = data\n      Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`)\n      unblocking(position)\n    })\n    .catch((data) => {\n      const {position, delay} = data\n      Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`)\n      unblocking(position)\n    })\n    currDelay += step\n  }\n}\n\nconst form = document.querySelector('form.form')\n\nform.addEventListener(\"submit\", (ev) => {\n  ev.preventDefault()\n  if(ev.currentTarget.getAttribute(\"pending\")){\n    return\n  }\n  if(!ev.currentTarget){\n    return\n  }\n  const data = {\n    position: 1,\n    form: ev.currentTarget\n  }\n  doPromises(data)\n})"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","ev","preventDefault","currentTarget","getAttribute","data1","form","form1","elems","elements","amount","parseInt","value","delay1","step","currDelay","setAttribute","unblocking","removeAttribute","i","then","data","Notify","success","catch","failure","$47d4ff9957288465$var$doPromises"],"version":3,"file":"03-promises.8197b204.js.map"}