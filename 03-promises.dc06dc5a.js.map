{"mappings":"AAEA,IAAIA,EAAW,GACf,MAAMC,EAAOC,SAASC,cAAc,SAE9BC,EAAYF,SAASC,cAAc,UAWzC,SAASE,EAAcC,EAAUC,GACjC,OAAO,IAAIC,SAAS,CAACC,EAASC,KAC5B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAY,KACNH,EAEFF,EAAQ,C,SAAEH,E,MAAUC,IAIpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE7BA,EAAM,G,CArBVN,EAAKc,iBAAiB,SAItB,SAAwBC,GACpBhB,EAASgB,EAAEC,OAAOC,MAAQF,EAAEC,OAAOE,MACnCC,QAAQC,IAAIrB,E,IAJhBI,EAAUW,iBAAiB,SAAUV,GAsBrC,IAAI,IAAIiB,EAAI,EAAGA,GAAKtB,EAASuB,OAAQD,IAAM,CACvBjB,EAAciB,EAAGtB,EAASO,OAEzCiB,MAAK,EAAClB,SAAEA,EAAQC,MAAEA,MACjBa,QAAQC,IAAI,uBAAqBf,QAAiBC,MAAU,IAE7DkB,OAAM,EAACnB,SAAEA,EAAQC,MAAEA,MAClBa,QAAQC,IAAI,sBAAoBf,QAAiBC,MAAU,IAE7DP,EAASO,OAASP,EAAS0B,I","sources":["src/js/03-promises.js"],"sourcesContent":["// import Notiflix from 'notiflix';\n\nlet formData = {};\nconst form = document.querySelector(\".form\");\n\nconst submitBtn = document.querySelector(\"button\");\n\nform.addEventListener(\"input\", onInputChange);\n\nsubmitBtn.addEventListener(\"submit\", createPromise);\n\nfunction onInputChange (e) {\n    formData[e.target.name] = e.target.value;\n    console.log(formData);\n};\n\nfunction createPromise(position, delay) {\nreturn new Promise ((resolve, reject) => {\n  const shouldResolve = Math.random() > 0.3;\n  setTimeout( () => {\n    if (shouldResolve) {\n      // Fulfill\n      resolve({ position, delay });\n    }\n    else {\n      // Reject\n      reject({ position, delay });\n    };\n  },delay);\n});\n};\nfor(let i = 0; i <= formData.amount; i++ ) {\n    const promise = createPromise(i, formData.delay);\n    promise\n    .then(({ position, delay }) => {\n      console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n    formData.delay += formData.step;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// В HTML есть разметка формы, в поля которой пользователь будет вводить первую задержку в миллисекундах, шаг увеличения задержки для каждого промиса после первого и количество промисов которое необходимо создать.\n\n// <form class=\"form\">\n//   <label>\n//     First delay (ms)\n//     <input type=\"number\" name=\"delay\" required />\n//   </label>\n//   <label>\n//     Delay step (ms)\n//     <input type=\"number\" name=\"step\" required />\n//   </label>\n//   <label>\n//     Amount\n//     <input type=\"number\" name=\"amount\" required />\n//   </label>\n//   <button type=\"submit\">Create promises</button>\n// </form>\n\n// Напиши скрипт, который при сабмите формы вызывает функцию createPromise(position, delay) столько раз, сколько ввели в поле amount. При каждом вызове передай ей номер создаваемого промиса (position) и задержку учитывая введенную пользователем первую задержку (delay) и шаг (step).\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n\n// Дополни код функции createPromise так, чтобы она возвращала один промис, который выполянется или отклоняется через delay времени. Значением промиса должен быть объект, в котором будут свойства position и delay со значениями одноименных параметров. Используй начальный код функции для выбора того, что нужно сделать с промисом - выполнить или отклонить.\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });"],"names":["$47d4ff9957288465$var$formData","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$submitBtn","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","e","target","name","value","console","log","i","amount","then","catch","step"],"version":3,"file":"03-promises.dc06dc5a.js.map"}