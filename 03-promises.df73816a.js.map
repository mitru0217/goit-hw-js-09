{"mappings":"AACA,MAAMA,EAAOC,SAASC,cAAc,SACpCC,QAAQC,IAAIJ,GACZ,MAAMK,EAAYJ,SAASC,cAAc,UACzCC,QAAQC,IAAIC","sources":["src/js/03-promises.js"],"sourcesContent":["\nconst form = document.querySelector(\".form\");\nconsole.log(form);\nconst submitBtn = document.querySelector(\"button\");\nconsole.log(submitBtn);\n\n\n\n\n\n// function createPromise(position, delay) {\n// return new Promise = (resolve, reject) => {\n//   const shouldResolve = Math.random() > 0.3;\n//   setTimeout( () => {\n//     if (shouldResolve) {\n//       // Fulfill\n//       resolve(\"✅ Fulfilled promise ${position} in ${delay}ms\");\n//     }\n//     else {\n//       // Reject\n//       reject(\"❌ Rejected promise ${position} in ${delay}ms\");\n//     };\n//   },delay);\n// };\n// };\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// В HTML есть разметка формы, в поля которой пользователь будет вводить первую задержку в миллисекундах, шаг увеличения задержки для каждого промиса после первого и количество промисов которое необходимо создать.\n\n// <form class=\"form\">\n//   <label>\n//     First delay (ms)\n//     <input type=\"number\" name=\"delay\" required />\n//   </label>\n//   <label>\n//     Delay step (ms)\n//     <input type=\"number\" name=\"step\" required />\n//   </label>\n//   <label>\n//     Amount\n//     <input type=\"number\" name=\"amount\" required />\n//   </label>\n//   <button type=\"submit\">Create promises</button>\n// </form>\n\n// Напиши скрипт, который при сабмите формы вызывает функцию createPromise(position, delay) столько раз, сколько ввели в поле amount. При каждом вызове передай ей номер создаваемого промиса (position) и задержку учитывая введенную пользователем первую задержку (delay) и шаг (step).\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n\n// Дополни код функции createPromise так, чтобы она возвращала один промис, который выполянется или отклоняется через delay времени. Значением промиса должен быть объект, в котором будут свойства position и delay со значениями одноименных параметров. Используй начальный код функции для выбора того, что нужно сделать с промисом - выполнить или отклонить.\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });"],"names":["$47d4ff9957288465$var$form","document","querySelector","console","log","$47d4ff9957288465$var$submitBtn"],"version":3,"file":"03-promises.df73816a.js.map"}